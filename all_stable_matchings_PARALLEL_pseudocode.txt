//FIND_ALL_ROTATIONS modificato in modo da tornare anche una lista di tutte le rotazioni

ALL_STABLE_MATCHINGS(n, men_preferences, women_preferences):
	top_matching = GALE_SHAPLEY(n, men_preferences, women_preferences)
	
	//crea il grafo delle rotazioni
	free_rotations_list, all_rotations_list = FIND_ALL_ROTATIONS(men_preferences, women_preferences, n)
	//free_rotations_list è la lista dei nodi liberi, cioè i nodi del grafo che non hanno predecessori
	
	mem_list = NEW_LIST()
	t_mem = NEW_MEM_EL()
	t_mem.size = 1
	top_matching_copy = int[n]
	for i=0; i<n; i++:
		top_matching_copy[i]=top_matching[i]
	t_mem.results = top_matching_copy
	mem_list.append(t_mem)
	
	int dim = 0
	for r in all_rotations_list:
		dim++
	missing_predecessors[] = int[dim]
	for r in all_rotations_list:
		missing_predecessors[r.value.index]=r.value.missing_predecessors
	
	PARALLEL_RECURSIVE_SEARCH(top_matching,n,free_rotations_list,mem_list,missing_predecessors,dim)
	
	//compatta memoria
	
	return [...]
	
PARALLEL_RECURSIVE_SEARCH(matching,n,free_rotations_list,mem_list,missing_predecessors,remaining_rotations):
	if IS_MEMORY_REQUIRED_BY_GRID_TOO_BIG(remaining_rotations,[...]: //basato sulle proprietà del device e parametri passati al momemento del lancio
	
		//chiamata ricorsiva non applicando la prima rotazione
		PARALLEL_RECURSIVE_SEARCH(matching,n,free_rotations_list.next,mem_list,missing_predecessors,remaining_rotations-1)
		
		//applica la rotazione
		rotation_node = free_rotations_list.value
		rotation = rotation_node.value
		first_woman = rotation.value[1]
		while rotation.next!=NULL:
			matching[rotation.value[0]]=rotation.next.value[1]
			rotation = rotation.next
		matching[rotation.value[0]]=first_woman
		
		//aggiunge il matching ai risultati
		new_matching = int[n]
		for i=0; i<n; i++:
			new_matching[i]=matching[i]
		t_mem = NEW_MEM_EL()
		t_mem.size = 1
		t_mem.results = new_matching
		mem_list.append(t_mem)
		mem_list.append(new_matching)
		
		//aggiorna missing_predecessors
		for successor in rotation_node.successors:
			missing_predecessors[successor.index] -= 1
			if missing_predecessors[successor.index] == 0:
				//aggiungi questa rotazione in cima lista
				new_free_rotations_list = NEW_LIST_ELEMENT()
				new_free_rotations_list.value = successor
				new_free_rotations_list.next = free_rotations_list.next
		
		//chiamata ricorsiva applicando la prima rotazione
		PARALLEL_RECURSIVE_SEARCH(matching,n,new_free_rotations_list,mem_list,missing_predecessors,remaining_rotations-1)
		
		//se necessario, deallocare primo elemento di new_free_rotations_list
		
		//ripristino i missing_predecessors dei successori
		for successor in free_rotations_list.value.successors:
			missing_predecessors[successor.index] += 1
		
		//ripristina rotazione
		rotation = rotation_node.value
		while rotation!=NULL:
			matching[rotation.value[0]]=rotation.value[1]
			rotation = rotation.next
		
	else: //il codice reale deve includere anche il controllo degli errori
		number_of_exposed_rotations = 0
		list_el = free_rotations_list
		while list_el != NULL:
			number_of_exposed_rotations++
			list_el = list_el.next
		
		grid_dimension = 1
		for i=0; i<number_of_exposed_rotations; i++:
			grid_dimension *= 2
		grid_dimension -= 1 //togliamo il matching di partenza
		
		-> Lancio sincrono di grid_dimension kernel con i dati [...]
		
		results_dim = COPY_AN_INTEGER_FROM_DEVICE_RESULTS()
		
		t_mem = NEW_MEM_EL()
		t_mem.size = results_dim
		results_fragment = int[results_dim]
		
		results_fragment = COPY_REST_OF_DEVICE_RESULTS()
		
		t_mem.results = results_fragment
		mem_list.append(t_mem)
		mem_list.append(new_matching)
		
